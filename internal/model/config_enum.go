// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// FormatJson is a Format of type json.
	FormatJson Format = "json"
	// FormatYaml is a Format of type yaml.
	FormatYaml Format = "yaml"
	// FormatToml is a Format of type toml.
	FormatToml Format = "toml"
)

var ErrInvalidFormat = errors.New("not a valid Format")

// String implements the Stringer interface.
func (x Format) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Format) IsValid() bool {
	_, err := ParseFormat(string(x))
	return err == nil
}

var _FormatValue = map[string]Format{
	"json": FormatJson,
	"yaml": FormatYaml,
	"toml": FormatToml,
}

// ParseFormat attempts to convert a string to a Format.
func ParseFormat(name string) (Format, error) {
	if x, ok := _FormatValue[name]; ok {
		return x, nil
	}
	return Format(""), fmt.Errorf("%s is %w", name, ErrInvalidFormat)
}

// MarshalText implements the text marshaller method.
func (x Format) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Format) UnmarshalText(text []byte) error {
	tmp, err := ParseFormat(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
