// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package utils

import (
	"errors"
	"fmt"
)

const (
	// ConflictResolutionError is a ConflictResolution of type error.
	ConflictResolutionError ConflictResolution = "error"
	// ConflictResolutionKeep is a ConflictResolution of type keep.
	ConflictResolutionKeep ConflictResolution = "keep"
	// ConflictResolutionOverwrite is a ConflictResolution of type overwrite.
	ConflictResolutionOverwrite ConflictResolution = "overwrite"
)

var ErrInvalidConflictResolution = errors.New("not a valid ConflictResolution")

// String implements the Stringer interface.
func (x ConflictResolution) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ConflictResolution) IsValid() bool {
	_, err := ParseConflictResolution(string(x))
	return err == nil
}

var _ConflictResolutionValue = map[string]ConflictResolution{
	"error":     ConflictResolutionError,
	"keep":      ConflictResolutionKeep,
	"overwrite": ConflictResolutionOverwrite,
}

// ParseConflictResolution attempts to convert a string to a ConflictResolution.
func ParseConflictResolution(name string) (ConflictResolution, error) {
	if x, ok := _ConflictResolutionValue[name]; ok {
		return x, nil
	}
	return ConflictResolution(""), fmt.Errorf("%s is %w", name, ErrInvalidConflictResolution)
}

// MarshalText implements the text marshaller method.
func (x ConflictResolution) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ConflictResolution) UnmarshalText(text []byte) error {
	tmp, err := ParseConflictResolution(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
